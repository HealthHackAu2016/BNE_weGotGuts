AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  APIInstanceType:
    Type: String
    Default: t2.small
    Description: Enter instance type for API server
  VisInstanceType:
    Type: String
    Default: t2.small
    Description: Enter instance type for visualisation server
  APIInstanceAMI:
    Type: String
    Default: ami-ba3e14d9
    Description: Enter instance AMI for API server
  VisInstanceAMI:
    Type: String
    Default: ami-899eafea
    Description: Enter instance AMI for visualisation server
  KeyName:
    Type: String
    Default: GutsKey
    Description: Enter the AWS key to use for the servers
Resources:
  GutsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'false'
      EnableDnsHostnames: 'false'
      InstanceTenancy: dedicated
      Tags:
      - Key: Name
        Value: HHGutsVPC
      - Key: Application
        Value: Guts
  GutsSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: GutsVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "ap-southeast-2a"
      Tags:
      - Key: Name
        Value: HHGutsSubnet
      - Key: Application
        Value: Guts
  GutsInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: HHGutsIGW
      - Key: Application
        Value: Guts
  GutsAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: GutsVPC
      InternetGatewayId:
        Ref: GutsInternetGateway
  GutsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GutsVPC
      Tags:
      - Key: Name
        Value: HHGutsRouteTable
      - Key: Application
        Value: Guts
  GutsPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GutsAttachGateway
    Properties:
      RouteTableId:
        Ref: GutsRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: GutsInternetGateway
  GutsSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: GutsSubnet
      RouteTableId:
        Ref: GutsRouteTable
  GutsNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: GutsVPC
      Tags:
      - Key: Name
        Value: HHGutsNACL
      - Key: Application
        Value: Guts
  GutsInboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: GutsNetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '0'
        To: '65535'
  GutsOutboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: GutsNetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '0'
        To: '65535'
  GutsSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: GutsSubnet
      NetworkAclId:
        Ref: GutsNetworkAcl
  GutsAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Guts API server
      VpcId:
        Ref: GutsVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  GutsVisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Guts Visualisation server
      VpcId:
        Ref: GutsVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  GutsAPIEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId:
        Ref: "APIInstanceAMI"
      InstanceType:
        Ref: "APIInstanceType"
      KeyName:
        Ref: "KeyName"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "GutsAPISecurityGroup"
          SubnetId:
            Ref: "GutsSubnet"
      Tags:
      - Key: Name
        Value: HHGutsAPI
      - Key: Application
        Value: Guts
  GutsVisEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId:
        Ref: "VisInstanceAMI"
      InstanceType:
        Ref: "VisInstanceType"
      KeyName:
        Ref: "KeyName"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "GutsVisSecurityGroup"
          SubnetId:
            Ref: "GutsSubnet"
      Tags:
      - Key: Name
        Value: HHGutsVis
      - Key: Application
        Value: Guts
